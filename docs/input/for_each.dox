/*!
    \defgroup for_each

    The for_each familiy of algorithms applies an action to each element in a range.
*/

/*!
    \defgroup for_each_adjacent
    \ingroup for_each

    The for_each_adjacent familiy of algorithms applies a binary action to each adjacent
    pair of elements in a range.
*/

namespace aastl {

/*!
    \fn BinaryFunction for_each_adjacent(InputIterator first, InputIterator last, BinaryFunction f)
    \ingroup for_each_adjacent

    \requires `InputIterator`'s value type shall be convertible to `BinaryFunction`'s argument
    types.

    \pre `[first, last)` is a valid range.

    \effects For each adjacent pair of iterators `(a, b)`, `b == next(a)`, performs `f(*a, *b)`.
    If `std::distance(first, last) < 2`, does nothing.

    \returns `f`

    \complexity Exactly `max((last - first) - 1, 0)` applications of `f` and `(last - first)`
    applications of `++first`. Unless `InputIterator` models `ForwardIterator`, also performs
    `max((last - first) - 1, 0)` copies of `InputIterator`'s value type.
*/

/*!
    \class for_each_n_result

    Represents the result of a for_each_n() / for_each_adjacent_n() call.
*/

/*!
    \var for_each_n_result::end

    The end point of the iterator passed to for_each_n().
*/

/*!
    \var for_each_n_result::function

    The function object passed to for_each_n(), after it has been called
    on each element of the range.
*/

/*!
    \fn for_each_adjacent_n(InputIterator first, Size count, BinaryFunction f)
    \ingroup for_each_adjacent

    \requires `InputIterator`'s value type shall be convertible to `BinaryFunction`'s argument
    types.

    \pre `[first, count)` is a valid range.

    \effects For each adjacent pair of iterators `(a, b)`, `b == next(a)`, performs `f(*a, *b)`.
    If `std::distance(first, last) < 2`, does nothing.

    \returns `{ first + size, f }`

    \complexity Exactly `max(count - 1, 0)` applications of `f` and `count`
    applications of `++first`. Unless `InputIterator` models `ForwardIterator`, also performs
    `max(count - 1, 0)` copies of `InputIterator`'s value type.
*/


}
